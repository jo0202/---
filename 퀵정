def insertionSort(A, start, end):
    # 배열 A의 부분 배열을 삽입 정렬하는 함수
    for i in range(start + 1, end + 1):
        key = A[i]
        j = i - 1
        # 현재 요소 key를 정렬된 부분 배열의 적절한 위치에 삽입
        while j >= start and A[j] > key:
            A[j + 1] = A[j]
            j -= 1
        A[j + 1] = key
        # key가 올바른 위치에 삽입됨

def medianOfThree(A, low, high):
    # 배열 A에서 low, mid, high 요소 중 중앙값을 선택하는 함수
    mid = (low + high) // 2
    # A[low], A[mid], A[high] 중 크기 순으로 정렬
    if A[low] > A[mid]:
        A[low], A[mid] = A[mid], A[low]
    if A[low] > A[high]:
        A[low], A[high] = A[high], A[low]
    if A[mid] > A[high]:
        A[mid], A[high] = A[high], A[mid]
    # 중앙값을 피벗으로 사용하기 위해 high - 1 위치로 이동
    A[mid], A[high - 1] = A[high - 1], A[mid]
    return A[high - 1]

def partition(A, low, high):
    # 배열 A를 피벗을 기준으로 분할하는 함수
    pivot = medianOfThree(A, low, high)
    left, right = low, high - 1
    while True:
        left += 1
        # 피벗보다 큰 요소를 찾음
        while A[left] < pivot:
            left += 1
        right -= 1
        # 피벗보다 작은 요소를 찾음
        while A[right] > pivot:
            right -= 1
        if left >= right:
            break
        # 피벗을 기준으로 요소 교환
        A[left], A[right] = A[right], A[left]
    # 피벗을 제자리에 위치시킴
    A[left], A[high - 1] = A[high - 1], A[left]
    return left

def quickSort(A, low, high):
    # 배열 A를 퀵 정렬하는 함수
    if high - low <= 10:  # 삽입 정렬을 사용할 임계값
        insertionSort(A, low, high)
    else:
        pivotIndex = partition(A, low, high)
        # 피벗을 기준으로 좌우 부분 배열을 재귀적으로 정렬
        quickSort(A, low, pivotIndex - 1)
        quickSort(A, pivotIndex + 1, high)

def optimizedQuickSort(A):
    # 최적화된 퀵 정렬을 수행하는 함수
    quickSort(A, 0, len(A) - 1)


B = [80, 14, 55, 10, 8, 21, 31]
print("배열", B)
optimizedQuickSort(B)
print("퀵정렬을 적용한 배열", B)
