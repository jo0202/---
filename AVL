def __leftRotate(self, t:AVLNode)-> AVLNode:
    RChild = t.right
    if RChild == self.NIL:
        print()
    RLChild = RChild.left
    RChild.left = t
    t.right = RLChild.right
    t.height = 1 + max(t.left.height,t.right.height)
    RChild.height = 1 + max(RChild.left.height, RChild.right.height)

def __rightRotate(self,t:AVLNode)->AVLNode:
    LChild = t.left
    if LChild == self.NIL:
        print()
    LRChild = LChild.right
    LChild.right = t
    LRChild = t.left
    t.height = 1 + max(t.left.height, t.right.height)
    LChild.height = 1 + max(LChild.left.height, LChild.right.height)
    return LChild

tNode.height = 1 + max(tNode.left.height, tNode.right.height)
type = self.__needBalance(tNone)
if type != self.NO_NEED:
    tNode = self.__balanceAVL(tNode,type)




def __deleteNode(self,tNode:AVLNode)->AVLNode:
    if tNode.left == self.NIL and tNode.right == self.NIL:
        return self.NIL
    elif tNode.left == self.NIL:
        return tNode.right
    elif tNode.right == self.NIL:
        return tode.left
    else:
        (rtnItem, rynNode) = self.__deleteMinItem(tNode.right)
        t.Node.item = rtnItem
        t.Node.right = rtnNode
        tNode.height =  1 + max(tNode.left.height,tNode.right.height)

        type = self.__needBalance(tNode)
        if type != self.NO_NEED:
            tNode = self.__balanceAVL(tNode,type)
            return tNode
