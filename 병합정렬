def insertionSort(A, start, end):
    # 배열 A의 부분 배열을 삽입 정렬하는 함수
    for i in range(start + 1, end + 1):
        key = A[i]
        j = i - 1
        # 현재 요소 key를 정렬된 부분 배열의 적절한 위치에 삽입
        while j >= start and A[j] > key:
            A[j + 1] = A[j]
            j -= 1
        A[j + 1] = key
        # key가 올바른 위치에 삽입됨

def merge(A, temp, left, mid, right):
    # 배열 A의 두 부분 배열을 병합하는 함수
    i, j, k = left, mid + 1, left
    # i는 왼쪽 부분 배열, j는 오른쪽 부분 배열의 시작 인덱스
    while i <= mid and j <= right:
        if A[i] <= A[j]:
            temp[k] = A[i]
            i += 1
        else:
            temp[k] = A[j]
            j += 1
        k += 1
    # 왼쪽 부분 배열의 남은 요소를 temp에 복사
    while i <= mid:
        temp[k] = A[i]
        i += 1
        k += 1
    # 오른쪽 부분 배열의 남은 요소를 temp에 복사
    while j <= right:
        temp[k] = A[j]
        j += 1
        k += 1
    # temp 배열의 정렬된 내용을 원래 배열 A에 복사
    for i in range(left, right + 1):
        A[i] = temp[i]

def mergeSort(A, temp, left, right):
    # 배열 A를 병합 정렬하는 함수
    if right - left <= 10:  # 삽입 정렬을 사용할 임계값
        insertionSort(A, left, right)
    else:
        mid = (left + right) // 2
        mergeSort(A, temp, left, mid)
        mergeSort(A, temp, mid + 1, right)
        merge(A, temp, left, mid, right)

def optimizedMergeSort(A):
    # 최적화된 병합 정렬을 수행하는 함수
    temp = [0] * len(A)
    mergeSort(A, temp, 0, len(A) - 1)

# 테스트
A = [44, 14, 35, 72, 2, 51, 90]
print("배열:", A)
optimizedMergeSort(A)
print("병합정렬을 적용한 배열:", A)
